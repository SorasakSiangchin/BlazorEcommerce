@page "/product/{id:int}"
@inject IProductService ProductService;
@inject ICartService CartService;

@if (Product == null)
{
    <span>@message</span>
}
else
{
    <div class="wedia">
        <div class="wedia-img-wrapper mr-2">
            @if (!string.IsNullOrEmpty(Product.ImageUrl))
            {
                <img class="media-img" src="@Product.ImageUrl" alt="@Product.Title" />
            }
            else
            {
                <MudCarousel Class="mud-width-full" ItemsSource="@Product.Images" Style="height: 200px;">
                    <ItemTemplate>
                        <MudImage Src="@context.Data"></MudImage>
                    </ItemTemplate>
                </MudCarousel>
            }
        </div>
        <div class="media-body">
            <h2 class="md-0">@Product.Title</h2>
            <p>@Product.Description</p>
            @if (Product.Variants != null && Product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-control" @bind="currentTypeId">
                        @foreach (var variant in Product.Variants)
                        {
                            <option value="@variant.ProductTypeId">
                                @variant.ProductType.Name
                            </option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() is not null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart" >
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add To Cart
            </button>
        </div>
    </div>
}

@code {
    private string message = string.Empty;
    private Product? Product = null;
    private int currentTypeId = 1;
    [Parameter]
    public int Id { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        message = "Loading product...";
        var result = await ProductService.GetProduct(Id);
        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            Product = result.Data;
            if (Product?.Variants.Count > 0)
            {
                currentTypeId = Product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant() //ProductVariants ในปัจจุบัน
    {
        var variant = Product?.Variants.FirstOrDefault(e => e.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart ()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
        {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId,
        };
        await CartService.AddToCart(cartItem);
    }
}
