@page "/login";
@using Microsoft.AspNetCore.WebUtilities;
@inject IAuthService AuthService;
@inject ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject ICartService CartService;

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator /> @*เรียกใช้ Validate*@
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText 
            id="email" 
            @bind-Value="user.Email" 
            class="form-control" />
        <ValidationMessage For="@(() => user.Email)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText 
            type="password" 
            id="password" 
            @bind-Value="user.Password" 
            class="form-control"  />
        <ValidationMessage For="@(()=>user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary" >
        Login
    </button>
</EditForm>
<div class="text-danger">
    <span>
        @errorMessage
    </span>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    // เก็บค่า url
    private string returnUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // IsAuthenticated ได้รับการรับรอง
        if (result.User.Identity is not null && result.User.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("");

        // NavigationManager.ToAbsoluteUri แปลง Url
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            // เรียกใช้ไฟล์ CustomAuthStateProvider
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
